//
//  {{ prefix }}{{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.
//

#import "{{ prefix }}{{ module_info.name }}Presenter.h"
#import "{{ prefix }}{{ module_info.name }}ViewInput.h"
#import "{{ prefix }}{{ module_info.name }}InteractorInput.h"
#import "{{ prefix }}{{ module_info.name }}RouterInput.h"
#import "{{ prefix }}{{ module_info.name }}ViewModel.h"
#import "ASBatchContext.h"

@interface {{ prefix }}{{ module_info.name }}Presenter ()
@property (nonatomic, strong) {{ prefix }}{{ module_info.name }}ViewModel *viewModel;
@end

@implementation {{ prefix }}{{ module_info.name }}Presenter

#pragma mark - Методы {{ prefix }}ModuleOutput

#pragma mark - Методы {{ prefix }}{{ module_info.name }}ModuleInput

- (void)configureModule {
  // Стартовая конфигурация модуля, не привязанная к состоянию view

  [self.viewModel update:^({{prefix}}{{module_info.name}}ViewModel * builder) {
    //Configure ViewModel with default params

  }];
}

#pragma mark - Методы {{ prefix }}{{ module_info.name }}ViewOutput

- (void)didTriggerViewReadyEvent {

}

#pragma mark - Actions

- (void)a_closeModule {

  [self.interactor closeModule];
}

- (void)a_didSelectedIndexPath:(NSIndexPath *)indexPath {

}

#pragma mark - Delegates

- (NSUInteger)getNumberOfItemsInSection:(NSUInteger)section {
  return 0;
}

- (id)getCellViewModelForIndexPath:(NSIndexPath *)indexPath {
  return [NSObject new];
}

- (void)fetchBatchRequestWithContext:(ASBatchContext *)batchContext {
 
}

#pragma mark - Методы {{ prefix }}{{ module_info.name }}InteractorOutput

@end